"use strict";(self.webpackChunkdhiwise_document=self.webpackChunkdhiwise_document||[]).push([[9587],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,f=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),i=n(68758),l=n(83191),o=n(43199);const s={sidebar_position:7},p="File Upload",d={unversionedId:"android/file-upload",id:"android/file-upload",title:"File Upload",description:"",source:"@site/docs/android/file-upload.md",sourceDirName:"android",slug:"/android/file-upload",permalink:"/docs/android/file-upload",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"android",previous:{title:"Add Permissions",permalink:"/docs/android/add-permissions"},next:{title:"Show Alert",permalink:"/docs/android/show-alert"}},c={},u=[{value:"Select the file and data type",id:"select-the-file-and-data-type",level:2},{value:"Bind API",id:"bind-api",level:2},{value:"Step 1:",id:"step-1",level:4},{value:"Step 2:",id:"step-2",level:4},{value:"Step 3:",id:"step-3",level:4},{value:"Generated code snippet",id:"generated-code-snippet",level:4}],g={toc:u};function f(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"file-upload"},"File Upload"),(0,r.kt)("p",null,"Add upload files functionality to any of your UI components. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The upload file API is required before you can bind APIs.")),(0,r.kt)("h2",{id:"select-the-file-and-data-type"},"Select the file and data type"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example banner",src:n(40845).Z,width:"1920",height:"1140"})),(0,r.kt)("h2",{id:"bind-api"},"Bind API"),(0,r.kt)("h4",{id:"step-1"},"Step 1:"),(0,r.kt)("p",null,"Only the upload file API will be available in the list."),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("b",null,"Header")),(0,r.kt)("td",null,"Content-type multipart/form-data")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("b",null,"FormData")),(0,r.kt)("td",null,"Selected file or constant"))),(0,r.kt)("h4",{id:"step-2"},"Step 2:"),(0,r.kt)("p",null,"Handle API response"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("b",null,"Key")),(0,r.kt)("td",null,"Give the key a name")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("b",null,"Select type")),(0,r.kt)("td",null,"View or save to preference"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"View"),":  Select the view to which you want to show this API key data. You will get the code with API response variables assigned to this view's value."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Save to preference"),": The data will be saved in the API response.")),(0,r.kt)("h4",{id:"step-3"},"Step 3:"),(0,r.kt)("p",null,"Select response for on success or failure. The responses can be from ",(0,r.kt)("a",{href:"/docs/android/navigation"},"Navigation"),", ",(0,r.kt)("a",{href:"/docs/android/show-alert"},"Show Alert"),", or ",(0,r.kt)("a",{href:"/docs/android/api-integration"},"API Integration"),"."),(0,r.kt)("div",{className:"grid grid-cols-3 gap-20"},(0,r.kt)("a",{className:"Card",href:"/docs/android/navigation"},(0,r.kt)("img",{src:i.Z,alt:""}),(0,r.kt)("h4",null,"Navigation")),(0,r.kt)("a",{className:"Card",href:"/docs/ios/show-alert"},(0,r.kt)("img",{src:l.Z,alt:""}),(0,r.kt)("h4",null,"Show Alert")),(0,r.kt)("a",{className:"Card",href:"/docs/android/api-integration"},(0,r.kt)("img",{src:o.Z,alt:""}),(0,r.kt)("h4",null,"API integration"))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"generated-code-snippet"},"Generated code snippet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="fileUplaod.kt"',title:'"fileUplaod.kt"'},'//service class\n  @Multipart\n  @POST\n  public suspend fun createUpload(\n    @Url baseUrl: String,\n    @Part part: MultipartBody.Part,\n    @Header("Content-type") contentType: String?\n  ): CreateUploadResponse\n\n  //repository class\n  public suspend fun createUpload(contentType: String?, filePath: Uri):\n      Response<CreateUploadResponse> = try {\n    val isOnline = MyApp.getInstance().isOnline()\n    if(isOnline) {\n      val fileName = FileUploadHelper.getFileName(filePath)\n      val fileSize = FileUploadHelper.getFileBytes(filePath)\n      val fileSizeLimit = 12\n      var fileSizeValid = false\n      if (fileSize != null) {\n        fileSizeValid = FileUploadHelper.convertBytesToMB(fileSize)!! > fileSizeLimit\n        if (fileSizeValid) {\n          Toast.makeText(MyApp.getInstance(), "File Size is Large", Toast.LENGTH_LONG).show()\n        }\n      }\n      if (fileSize != null && !fileSizeValid) {\n        val part = MultipartBody.Part.createFormData("filename",\n            fileName,fileSize.toRequestBody("image/*".toMediaType()))\n        SuccessResponse(retrofitServices.createUpload("https://v2.convertapi.com/upload",part\n        ,contentType))\n        } else { \n        ErrorResponse("Something went wrong")\n      }\n    } else {\n      val internetException =\n          NoInternetConnection(MyApp.getInstance().getString(R.string.no_internet_connection))\n      ErrorResponse(internetException.message ?:errorMessage, internetException)\n    }\n  } catch(e:Exception) {\n    e.printStackTrace()\n    ErrorResponse(e.message ?:errorMessage, e)\n  }\n\n  //view model\n   public val createUploadLiveData: MutableLiveData<Response<CreateUploadResponse>> =\n      MutableLiveData<Response<CreateUploadResponse>>()\n\n  public var onClickBtnSignInSelectedFile: Uri? = null\n\n  public fun onClickBtnSignIn(): Unit {\n    viewModelScope.launch {\n      progressLiveData.postValue(true)\n      createUploadLiveData.postValue(onClickBtnSignInSelectedFile?.let {\n          networkRepository.createUpload(contentType = """multipart/form-data""",filePath = it) })\n      progressLiveData.postValue(false)\n    }\n  }\n\n  public fun bindCreateUploadResponse(response: CreateUploadResponse): Unit {\n    val loginModelValue = loginModel.value ?:LoginModel()\n    loginModel.value = loginModelValue\n  }\n\n  // controller class\n  public fun selectedFileBtnSignIn(path: Uri?): Unit {\n    viewModel.onClickBtnSignInSelectedFile = path\n    viewModel.onClickBtnSignIn()\n  }\n\n  ImagePickerFragmentDialog().show(supportFragmentManager){ path ->\n        selectedFileBtnSignIn(path)\n  }\n\n  public override fun addObservers(): Unit {\n    var progressDialog : AlertDialog? = null\n    viewModel.progressLiveData.observe(this@LoginActivity) {\n      if(it) {\n        progressDialog?.dismiss()\n        progressDialog = null\n        progressDialog = this@LoginActivity.showProgressDialog()\n      } else {\n        progressDialog?.dismiss()\n      }\n    }\n    viewModel.createUploadLiveData.observe(this@LoginActivity) {\n      if(it is SuccessResponse) {\n        val response = it.getContentIfNotHandled()\n        onSuccessCreateUpload(it)\n      } else if(it is ErrorResponse) {\n        onErrorCreateUpload(it.data ?:Exception())\n      }\n    }\n  }\n\n  private fun onSuccessCreateUpload(response: SuccessResponse<CreateUploadResponse>): Unit {\n    this.alert(MyApp.getInstance().getString(R.string.lbl_alert),\n    MyApp.getInstance().getString(R.string.lbl_success)) {\n      neutralButton {\n      }\n    }\n    viewModel.bindCreateUploadResponse(response.data)\n  }\n\n  private fun onErrorCreateUpload(exception: Exception): Unit {\n    when(exception) {\n      is NoInternetConnection -> {\n        Snackbar.make(binding.root, exception.message?:"", Snackbar.LENGTH_LONG).show()\n      }\n      is HttpException -> {\n        val errorBody = exception.response()?.errorBody()?.string()\n        val errorObject = if (errorBody != null  && errorBody.isJSONObject())\n        JSONObject(errorBody) else JSONObject()\n        val errMessage = MyApp.getInstance().getString(R.string.lbl_error)\n        this.alert(MyApp.getInstance().getString(R.string.lbl_alert),errMessage) {\n          neutralButton {\n          }\n        }\n      }\n    }\n  }\n')),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Got a question?\xa0",(0,r.kt)("a",{parentName:"p",href:"https://discord.com/invite/rFMnCG5MZ7"},(0,r.kt)("strong",{parentName:"a"},"Ask here")),"."))}f.isMDXComponent=!0},43199:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/APIIntegration-c2faee8f031f4f12e8f9610537700018.png"},83191:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Alert-33dbd9e63060b28aba2b00350a4ac96a.png"},68758:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/navigation-6a97d278c254e60e4848eaef23eb9be7.png"},40845:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/file-upload-14e179847daaaf3f6c6e50d2f8584021.png"}}]);